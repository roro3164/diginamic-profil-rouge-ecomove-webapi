// <auto-generated />
using System;
using Ecomove.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecomove.Api.Migrations
{
    [DbContext(typeof(EcoMoveDbContext))]
    [Migration("20241021124352_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Ecomove.Api.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PictureProfil")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandLabel")
                        .IsUnique();

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandLabel = "Peugeot"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandLabel = "Renault"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandLabel = "Citroen"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandLabel = "Mercedes"
                        });
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolAddress", b =>
                {
                    b.Property<Guid>("CarpoolAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CarpoolAddressId");

                    b.ToTable("CarpoolAddresses");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolAnnouncement", b =>
                {
                    b.Property<Guid>("CarpoolAnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DropOffAddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PickupAddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RentalVehicleId")
                        .HasColumnType("char(36)");

                    b.Property<double>("RideDistance")
                        .HasColumnType("double");

                    b.Property<double>("RideDuration")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CarpoolAnnouncementId");

                    b.HasIndex("DropOffAddressId");

                    b.HasIndex("PickupAddressId");

                    b.HasIndex("RentalVehicleId")
                        .IsUnique();

                    b.ToTable("CarpoolAnnouncements");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolBooking", b =>
                {
                    b.Property<Guid>("CarpoolAnnouncementId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CarpoolAnnouncementId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("CarpoolBookings");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryLabel")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryLabel = "SUV"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryLabel = "Berline"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryLabel = "Citadine"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryLabel = "Monospace"
                        });
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            BrandId = 1,
                            ModelLabel = "206"
                        },
                        new
                        {
                            ModelId = 2,
                            BrandId = 1,
                            ModelLabel = "308"
                        },
                        new
                        {
                            ModelId = 3,
                            BrandId = 1,
                            ModelLabel = "2008"
                        },
                        new
                        {
                            ModelId = 4,
                            BrandId = 1,
                            ModelLabel = "508"
                        },
                        new
                        {
                            ModelId = 5,
                            BrandId = 2,
                            ModelLabel = "Renault 5"
                        },
                        new
                        {
                            ModelId = 6,
                            BrandId = 2,
                            ModelLabel = "Clio"
                        },
                        new
                        {
                            ModelId = 7,
                            BrandId = 2,
                            ModelLabel = "Megane"
                        },
                        new
                        {
                            ModelId = 8,
                            BrandId = 3,
                            ModelLabel = "C4"
                        });
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Motorization", b =>
                {
                    b.Property<int>("MotorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MotorizationId"));

                    b.Property<string>("MotorizationLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MotorizationId");

                    b.HasIndex("MotorizationLabel")
                        .IsUnique();

                    b.ToTable("Motorizations");

                    b.HasData(
                        new
                        {
                            MotorizationId = 1,
                            MotorizationLabel = "Essence"
                        },
                        new
                        {
                            MotorizationId = 2,
                            MotorizationLabel = "Hybride"
                        },
                        new
                        {
                            MotorizationId = 3,
                            MotorizationLabel = "Éléctrique"
                        },
                        new
                        {
                            MotorizationId = 4,
                            MotorizationLabel = "Gazoile"
                        });
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.RentalVehicle", b =>
                {
                    b.Property<Guid>("RentalVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("char(36)");

                    b.HasKey("RentalVehicleId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentalVehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("StatusLabel")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("StatusLabel")
                        .IsUnique();

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusLabel = 1
                        },
                        new
                        {
                            StatusId = 2,
                            StatusLabel = 2
                        },
                        new
                        {
                            StatusId = 3,
                            StatusLabel = 3
                        });
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CO2emission")
                        .HasColumnType("int");

                    b.Property<int>("CarSeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Consumption")
                        .HasColumnType("double");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("MotorizationId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModelId");

                    b.HasIndex("MotorizationId");

                    b.HasIndex("Registration")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = new Guid("3454e9e3-be2f-14d7-14d7-08dc8abf2a7f"),
                            CO2emission = 90,
                            CarSeatNumber = 5,
                            CategoryId = 3,
                            Consumption = 6.5,
                            ModelId = 1,
                            MotorizationId = 4,
                            Photo = "https://images.caradisiac.com/images/2/6/7/9/192679/S1-peugeot-206-s16-1999-2005-la-gti-qui-ne-dit-pas-son-nom-des-2-500-eur-694126.jpg",
                            Registration = "SD-267-AZ",
                            StatusId = 1
                        },
                        new
                        {
                            VehicleId = new Guid("6554e9e3-be2f-45d0-14d7-08dc8abf2a7f"),
                            CO2emission = 95,
                            CarSeatNumber = 5,
                            CategoryId = 3,
                            Consumption = 8.5,
                            ModelId = 6,
                            MotorizationId = 1,
                            Photo = "https://images.caradisiac.com/logos/8/6/0/3/268603/S8-renault-clio-comment-le-prix-de-base-s-est-envole-en-deux-ans-192370.jpg",
                            Registration = "KN-324-LM",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.AppUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolAnnouncement", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.CarpoolAddress", "DropOffAddress")
                        .WithMany("CarpoolAnnouncementsDropOff")
                        .HasForeignKey("DropOffAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.CarpoolAddress", "PickupAddress")
                        .WithMany("CarpoolAnnouncementsPickUp")
                        .HasForeignKey("PickupAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.RentalVehicle", "RentalVehicle")
                        .WithOne("CarpoolAnnouncement")
                        .HasForeignKey("Ecomove.Api.Data.Models.CarpoolAnnouncement", "RentalVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropOffAddress");

                    b.Navigation("PickupAddress");

                    b.Navigation("RentalVehicle");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolBooking", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.AppUser", "AppUser")
                        .WithMany("CarpoolsBooking")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.CarpoolAnnouncement", "CarpoolAnnouncement")
                        .WithMany("Bookings")
                        .HasForeignKey("CarpoolAnnouncementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("CarpoolAnnouncement");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Model", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.RentalVehicle", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.AppUser", "AppUser")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.Vehicle", "Vehicle")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Vehicle", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.Category", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.Motorization", "Motorization")
                        .WithMany("Vehicles")
                        .HasForeignKey("MotorizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.Status", "Status")
                        .WithMany("Vehicles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Model");

                    b.Navigation("Motorization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomove.Api.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecomove.Api.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.AppUser", b =>
                {
                    b.Navigation("CarpoolsBooking");

                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolAddress", b =>
                {
                    b.Navigation("CarpoolAnnouncementsDropOff");

                    b.Navigation("CarpoolAnnouncementsPickUp");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.CarpoolAnnouncement", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Category", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Motorization", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.RentalVehicle", b =>
                {
                    b.Navigation("CarpoolAnnouncement");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Status", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Ecomove.Api.Data.Models.Vehicle", b =>
                {
                    b.Navigation("RentalVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
